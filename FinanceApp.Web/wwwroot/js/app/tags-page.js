/**
 * –õ–æ–≥–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–≥–∞–º–∏
 */
document.addEventListener('DOMContentLoaded', function() {
    const tagForm = document.getElementById('tag-form');
    const saveTagBtn = document.getElementById('save-tag-btn');
    const addTagModal = new bootstrap.Modal(document.getElementById('addTagModal'));
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–≥–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    loadTags();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–≥–∞
    saveTagBtn.addEventListener('click', async function() {
        const name = document.getElementById('tag-name').value.trim();
        const type = parseInt(document.getElementById('tag-type').value);
        const color = document.getElementById('tag-color').value;
        const icon = document.getElementById('tag-icon').value.trim();
        
        if (!name) {
            alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞');
            return;
        }
        
        try {
            await window.tagsService.createTag({
                name: name,
                type: type,
                color: color,
                icon: icon,
                visibility: 'Private'
            });
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –æ—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            addTagModal.hide();
            tagForm.reset();
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏
            loadTags();
            
            showNotification('–¢–µ–≥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
        } catch (error) {
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–≥–∞: ' + (error.data?.message || error.message), 'error');
        }
    });
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤
     */
    async function loadTags() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏ –ø–æ —Ç–∏–ø–∞–º
            const incomeTags = await window.tagsService.getTags('Income');
            const expenseTags = await window.tagsService.getTags('Expense');
            const transferTags = await window.tagsService.getTags('Transfer');
            
            displayTags('income-tags', incomeTags);
            displayTags('expense-tags', expenseTags);
            displayTags('transfer-tags', transferTags);
        } catch (error) {
            console.error('Error loading tags:', error);
            
            const errorMessage = error.isNetworkError 
                ? '<p class="text-warning">API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>' 
                : '<p class="text-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p>';
            
            document.getElementById('income-tags').innerHTML = errorMessage;
            document.getElementById('expense-tags').innerHTML = errorMessage;
            document.getElementById('transfer-tags').innerHTML = errorMessage;
        }
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
     */
    function displayTags(containerId, tags) {
        const container = document.getElementById(containerId);
        
        if (!tags || tags.length === 0) {
            container.innerHTML = '<p class="text-muted">–ù–µ—Ç —Ç–µ–≥–æ–≤</p>';
            return;
        }
        
        container.innerHTML = tags.map(tag => createTagElement(tag)).join('');
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTML —ç–ª–µ–º–µ–Ω—Ç–∞ —Ç–µ–≥–∞
     */
    function createTagElement(tag) {
        const bgColor = tag.color || '#007bff';
        const icon = tag.icon || 'üè∑Ô∏è';
        
        return `
            <div class="tag-item" style="background-color: ${bgColor}20; border-left: 3px solid ${bgColor};">
                <span class="tag-icon">${icon}</span>
                <span class="tag-name">${tag.name}</span>
                <span class="tag-actions">
                    <button onclick="deleteTag('${tag.id}')" title="–£–¥–∞–ª–∏—Ç—å">
                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                    </button>
                </span>
            </div>
        `;
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞
     */
    window.deleteTag = async function(id) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ–≥?')) {
            return;
        }
        
        try {
            await window.tagsService.deleteTag(id);
            loadTags();
            showNotification('–¢–µ–≥ —É–¥–∞–ª–µ–Ω', 'success');
        } catch (error) {
            showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞: ' + (error.data?.message || error.message), 'error');
        }
    };
    
    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    function showNotification(message, type) {
        // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ alert (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ toast)
        alert(message);
    }
});

