// <auto-generated />
using System;
using FinanceApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FinanceApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251017131006_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FinanceApp.Dbo.Models.FinancialOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime>("OperationDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("operation_datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("payment_method");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("OwnerId", "OperationDateTime")
                        .HasDatabaseName("IX_operations_owner_date_active")
                        .HasFilter("deleted_at IS NULL");

                    b.HasIndex("OwnerId", "Type", "OperationDateTime")
                        .HasDatabaseName("IX_operations_owner_type_date");

                    b.ToTable("financial_operations", null, t =>
                        {
                            t.HasComment("Финансовые операции пользователей");
                        });
                });

            modelBuilder.Entity("FinanceApp.Dbo.Models.OperationTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("OperationId")
                        .HasColumnType("uuid")
                        .HasColumnName("operation_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("OperationId", "TagId")
                        .IsUnique()
                        .HasDatabaseName("IX_operation_tags_operation_tag");

                    b.ToTable("operation_tags", null, t =>
                        {
                            t.HasComment("Связь операций и тегов (многие-ко-многим)");
                        });
                });

            modelBuilder.Entity("FinanceApp.Dbo.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsSystem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_system");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("permissions");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_roles_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_roles_name");

                    b.ToTable("roles", null, t =>
                        {
                            t.HasComment("Роли пользователей в системе");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Code = "SUPER_ADMIN",
                            CreatedAt = new DateTime(2025, 10, 17, 13, 10, 5, 476, DateTimeKind.Utc).AddTicks(3978),
                            Description = "Полный доступ ко всей системе",
                            IsSystem = true,
                            Name = "Суперадминистратор",
                            Permissions = "[\"*\"]",
                            UpdatedAt = new DateTime(2025, 10, 17, 13, 10, 5, 476, DateTimeKind.Utc).AddTicks(4071)
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Code = "ADMIN",
                            CreatedAt = new DateTime(2025, 10, 17, 13, 10, 5, 476, DateTimeKind.Utc).AddTicks(4148),
                            Description = "Управление пользователями и настройками",
                            IsSystem = true,
                            Name = "Администратор",
                            Permissions = "[\"users.manage\",\"settings.manage\",\"roles.manage\"]",
                            UpdatedAt = new DateTime(2025, 10, 17, 13, 10, 5, 476, DateTimeKind.Utc).AddTicks(4149)
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Code = "MANAGER",
                            CreatedAt = new DateTime(2025, 10, 17, 13, 10, 5, 476, DateTimeKind.Utc).AddTicks(4151),
                            Description = "Просмотр отчетов и аналитики",
                            IsSystem = true,
                            Name = "Менеджер",
                            Permissions = "[\"reports.view\",\"analytics.view\",\"operations.view\"]",
                            UpdatedAt = new DateTime(2025, 10, 17, 13, 10, 5, 476, DateTimeKind.Utc).AddTicks(4152)
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Code = "USER",
                            CreatedAt = new DateTime(2025, 10, 17, 13, 10, 5, 476, DateTimeKind.Utc).AddTicks(4153),
                            Description = "Операции с собственными данными",
                            IsSystem = true,
                            Name = "Пользователь",
                            Permissions = "[\"operations.own.manage\",\"tags.own.manage\"]",
                            UpdatedAt = new DateTime(2025, 10, 17, 13, 10, 5, 476, DateTimeKind.Utc).AddTicks(4154)
                        });
                });

            modelBuilder.Entity("FinanceApp.Dbo.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("icon");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsSystem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_system");

                    b.Property<int?>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("path");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("slug");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sort_order");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("usage_count");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Private")
                        .HasColumnName("visibility");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_tags_name_fulltext");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Name"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Name"), new[] { "gin_trgm_ops" });

                    b.HasIndex("ParentId");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("IX_tags_slug");

                    b.HasIndex("UsageCount")
                        .IsDescending()
                        .HasDatabaseName("IX_tags_usage_count_desc");

                    b.HasIndex("OwnerId", "Visibility")
                        .HasDatabaseName("IX_tags_owner_visibility");

                    b.HasIndex("Type", "IsActive")
                        .HasDatabaseName("IX_tags_type_active");

                    b.ToTable("tags", null, t =>
                        {
                            t.HasComment("Категории и теги для операций");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1111111-1111-1111-1111-111111111111"),
                            Color = "#4CAF50",
                            CreatedAt = new DateTime(2025, 10, 17, 13, 10, 5, 476, DateTimeKind.Utc).AddTicks(9207),
                            Icon = "💰",
                            IsActive = true,
                            IsSystem = true,
                            Level = 0,
                            Name = "Зарплата",
                            Path = "salary",
                            Slug = "salary",
                            Type = "Income",
                            UpdatedAt = new DateTime(2025, 10, 17, 13, 10, 5, 476, DateTimeKind.Utc).AddTicks(9283),
                            UsageCount = 0,
                            Visibility = "Public"
                        },
                        new
                        {
                            Id = new Guid("a2222222-2222-2222-2222-222222222222"),
                            Color = "#F44336",
                            CreatedAt = new DateTime(2025, 10, 17, 13, 10, 5, 476, DateTimeKind.Utc).AddTicks(9360),
                            Icon = "🛒",
                            IsActive = true,
                            IsSystem = true,
                            Level = 0,
                            Name = "Продукты",
                            Path = "groceries",
                            Slug = "groceries",
                            Type = "Expense",
                            UpdatedAt = new DateTime(2025, 10, 17, 13, 10, 5, 476, DateTimeKind.Utc).AddTicks(9361),
                            UsageCount = 0,
                            Visibility = "Public"
                        },
                        new
                        {
                            Id = new Guid("a3333333-3333-3333-3333-333333333333"),
                            Color = "#FF9800",
                            CreatedAt = new DateTime(2025, 10, 17, 13, 10, 5, 476, DateTimeKind.Utc).AddTicks(9364),
                            Icon = "🚗",
                            IsActive = true,
                            IsSystem = true,
                            Level = 0,
                            Name = "Транспорт",
                            Path = "transport",
                            Slug = "transport",
                            Type = "Expense",
                            UpdatedAt = new DateTime(2025, 10, 17, 13, 10, 5, 476, DateTimeKind.Utc).AddTicks(9364),
                            UsageCount = 0,
                            Visibility = "Public"
                        },
                        new
                        {
                            Id = new Guid("a4444444-4444-4444-4444-444444444444"),
                            Color = "#9C27B0",
                            CreatedAt = new DateTime(2025, 10, 17, 13, 10, 5, 476, DateTimeKind.Utc).AddTicks(9367),
                            Icon = "🎮",
                            IsActive = true,
                            IsSystem = true,
                            Level = 0,
                            Name = "Развлечения",
                            Path = "entertainment",
                            Slug = "entertainment",
                            Type = "Expense",
                            UpdatedAt = new DateTime(2025, 10, 17, 13, 10, 5, 476, DateTimeKind.Utc).AddTicks(9367),
                            UsageCount = 0,
                            Visibility = "Public"
                        });
                });

            modelBuilder.Entity("FinanceApp.Dbo.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_verified");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}")
                        .HasColumnName("settings");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_users_email_active")
                        .HasFilter("is_active = true");

                    b.HasIndex("LastLoginAt")
                        .HasDatabaseName("IX_users_last_login");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasDatabaseName("IX_users_login");

                    b.HasIndex("Phone")
                        .HasDatabaseName("IX_users_phone");

                    b.HasIndex("IsActive", "IsVerified")
                        .HasDatabaseName("IX_users_active_verified");

                    b.ToTable("users", null, t =>
                        {
                            t.HasComment("Пользователи системы");
                        });
                });

            modelBuilder.Entity("FinanceApp.Dbo.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("AssignedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("assigned_by");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("IX_user_roles_user_role");

                    b.ToTable("user_roles", null, t =>
                        {
                            t.HasComment("Связь пользователей и ролей");
                        });
                });

            modelBuilder.Entity("FinanceApp.Dbo.Models.FinancialOperation", b =>
                {
                    b.HasOne("FinanceApp.Dbo.Models.User", "Creator")
                        .WithMany("CreatedOperations")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_financial_operations_creator");

                    b.HasOne("FinanceApp.Dbo.Models.User", "Owner")
                        .WithMany("OwnedOperations")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_financial_operations_owner");

                    b.HasOne("FinanceApp.Dbo.Models.User", "Updater")
                        .WithMany("UpdatedOperations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_financial_operations_updater");

                    b.OwnsOne("FinanceApp.Dbo.Models.Money", "Money", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("character(3)")
                                .HasDefaultValue("RUB")
                                .HasColumnName("currency")
                                .IsFixedLength();

                            b1.HasKey("Id");

                            b1.ToTable("financial_operations");

                            b1.WithOwner()
                                .HasForeignKey("Id");
                        });

                    b.Navigation("Creator");

                    b.Navigation("Money")
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Updater");
                });

            modelBuilder.Entity("FinanceApp.Dbo.Models.OperationTag", b =>
                {
                    b.HasOne("FinanceApp.Dbo.Models.FinancialOperation", "Operation")
                        .WithMany("OperationTags")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_operation_tags_operations");

                    b.HasOne("FinanceApp.Dbo.Models.Tag", "Tag")
                        .WithMany("OperationTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_operation_tags_tags");

                    b.Navigation("Operation");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("FinanceApp.Dbo.Models.Tag", b =>
                {
                    b.HasOne("FinanceApp.Dbo.Models.User", "Owner")
                        .WithMany("OwnedTags")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_tags_owner");

                    b.HasOne("FinanceApp.Dbo.Models.Tag", "ParentTag")
                        .WithMany("ChildTags")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_tags_parent");

                    b.Navigation("Owner");

                    b.Navigation("ParentTag");
                });

            modelBuilder.Entity("FinanceApp.Dbo.Models.UserRole", b =>
                {
                    b.HasOne("FinanceApp.Dbo.Models.User", "AssignedByUser")
                        .WithMany()
                        .HasForeignKey("AssignedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_user_roles_assigned_by");

                    b.HasOne("FinanceApp.Dbo.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_user_roles_roles");

                    b.HasOne("FinanceApp.Dbo.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_user_roles_users");

                    b.Navigation("AssignedByUser");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FinanceApp.Dbo.Models.FinancialOperation", b =>
                {
                    b.Navigation("OperationTags");
                });

            modelBuilder.Entity("FinanceApp.Dbo.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FinanceApp.Dbo.Models.Tag", b =>
                {
                    b.Navigation("ChildTags");

                    b.Navigation("OperationTags");
                });

            modelBuilder.Entity("FinanceApp.Dbo.Models.User", b =>
                {
                    b.Navigation("CreatedOperations");

                    b.Navigation("OwnedOperations");

                    b.Navigation("OwnedTags");

                    b.Navigation("UpdatedOperations");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
